"use client"

import { useState } from "react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { ChevronLeft, ChevronRight, Mail, Loader2 } from "lucide-react"

interface Report {
    reportName: string
    reportType: "daily" | "monthly" | "yearly"
    generatedBy: string
    filtersApplied: {
        account: string  // could be an account name or ID
        dateRange: {
            startDate: string  // ISO string or formatted date
            endDate: string
        }
        invoiceType: string
        status: string
    }
    totalInvoices: number
    createdAt: string  // ISO date string
}

interface ReportsTableProps {
    data: Report[]
    isLoading: boolean
    hasGenerated: boolean
}

const ReportsTable = ({ data = [], isLoading, hasGenerated }: ReportsTableProps) => {
    const [currentPage, setCurrentPage] = useState(1)
    const itemsPerPage = 6
    const totalPages = Math.ceil(data.length / itemsPerPage)
    const paginatedData = data.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)
    console.log("data>>>>>>>>>>>>.", paginatedData)
    const hasData = paginatedData.length > 0


    // Helper function to get month name from a date string.
    const getMonthName = (dateStr: string) => {
        const date = new Date(dateStr)
        return date.toLocaleString('default', { month: 'long' })
    }

    return (
        <div className="lg:col-span-2">
            <div className="bg-card rounded-lg shadow-md border border-border overflow-hidden">
                <div className="bg-muted/50 px-6 py-4 border-b border-border">
                    <h2 className="text-lg font-medium">Reports</h2>
                </div>

                <div className="overflow-x-auto">
                    <Table>
                        <TableHeader>
                            <TableRow className="bg-muted/50">
                                <TableHead className="font-medium">Report Type</TableHead>
                                <TableHead className="font-medium">Generated By</TableHead>
                                <TableHead className="font-medium">Account</TableHead>
                                <TableHead className="font-medium">Date Range</TableHead>
                                <TableHead className="font-medium">Total Invoices</TableHead>
                                <TableHead className="font-medium">Created At</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {isLoading ? (
                                <TableRow>
                                    <TableCell colSpan={7} className="h-[300px] text-center">
                                        <div className="flex flex-col items-center justify-center text-muted-foreground">
                                            <Loader2 className="h-12 w-12 mb-2 animate-spin" />
                                            <p>Loading report data...</p>
                                        </div>
                                    </TableCell>
                                </TableRow>
                            ) : hasData ? (
                                paginatedData.map((report, index) => (
                                    <TableRow key={index} className="hover:bg-muted/50">
                                        <TableCell className="font-medium">{report.reportName}</TableCell>
                                        <TableCell>{report.reportType}</TableCell>
                                        <TableCell>{report.generatedBy}</TableCell>
                                        <TableCell>{report.filtersApplied.account}</TableCell>
                                        <TableCell>
                                            {report.reportType === "monthly"
                                                ? getMonthName(report.filtersApplied.dateRange.startDate)
                                                : `${report.filtersApplied.dateRange.startDate} - ${report.filtersApplied.dateRange.endDate}`}
                                        </TableCell>
                                        <TableCell>{report.totalInvoices}</TableCell>
                                        <TableCell>{new Date(report.createdAt).toLocaleDateString()}</TableCell>
                                    </TableRow>
                                ))
                            ) : hasGenerated ? (
                                <TableRow>
                                    <TableCell colSpan={7} className="h-[300px] text-center">
                                        <div className="flex flex-col items-center justify-center text-muted-foreground">
                                            <Mail className="h-12 w-12 mb-2 text-muted-foreground/30" />
                                            <p>No results found</p>
                                            <p className="text-sm mt-1">Try adjusting your filters</p>
                                        </div>
                                    </TableCell>
                                </TableRow>
                            ) : (
                                <TableRow>
                                    <TableCell colSpan={7} className="h-[300px] text-center">
                                        <div className="flex flex-col items-center justify-center text-muted-foreground">
                                            <Mail className="h-12 w-12 mb-2 text-muted-foreground/30" />
                                            <p>No data available</p>
                                            <p className="text-sm mt-1">Generate a report to view details</p>
                                        </div>
                                    </TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </div>

                <div className="flex items-center justify-between px-6 py-4 border-t border-border bg-muted/50">
                    <div className="text-sm text-muted-foreground">
                        {hasData
                            ? `Showing ${Math.min(itemsPerPage, paginatedData.length)} of ${data.length} entries`
                            : "Showing 0 of 0 entries"}
                    </div>

                    <div className="flex items-center gap-2">
                        <Button
                            variant="outline"
                            size="sm"
                            disabled={!hasData || currentPage === 1}
                            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                        >
                            <ChevronLeft className="h-4 w-4 mr-1" />
                            Previous
                        </Button>
                        <Button
                            variant="outline"
                            size="sm"
                            disabled={!hasData || currentPage === totalPages}
                            onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                        >
                            Next
                            <ChevronRight className="h-4 w-4 ml-1" />
                        </Button>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default ReportsTable
